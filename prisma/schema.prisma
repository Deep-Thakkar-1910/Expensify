// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  userAccounts  UserAccount[]
  Budget        Budget[]
  Transaction   Transaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String        @id
  accountId             String
  providerId            String
  userId                String
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  Transaction           Transaction[]

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserAccount {
  id        String      @id
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      AccountType
  balance   Decimal
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@index(type: Hash, fields: [type])
  @@map("user_account")
}

model Budget {
  id            String    @id
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Decimal
  lastAlertSent DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  @@map("budget")
}

model Transaction {
  id                String             @id
  userId            String
  type              TransactionType
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  amount            Decimal
  date              DateTime
  lastProcessed     DateTime?
  nextRecurring     DateTime?
  isRecurring       Boolean
  recurringInterval RecurringInterval?
  receiptUrl        String?
  status            String?
  description       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@index(type: Hash, fields: [type])
  @@map("transaction")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  SUBSCRIPTION
}

enum AccountType {
  CURRENT
  SAVINGS
  INVESTMENT
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
}
